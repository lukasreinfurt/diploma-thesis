package org.simtech.bootware.aws;

import java.io.InputStream;
import java.io.IOException;
import java.lang.InterruptedException;
import java.util.List;

import java.io.PrintWriter;
import java.io.FileNotFoundException;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.PropertiesCredentials;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.CreateSecurityGroupRequest;
import com.amazonaws.services.ec2.model.CreateSecurityGroupResult;
import com.amazonaws.services.ec2.model.DeleteSecurityGroupRequest;
import com.amazonaws.services.ec2.model.IpPermission;
import com.amazonaws.services.ec2.model.AuthorizeSecurityGroupIngressRequest;
import com.amazonaws.services.ec2.model.CreateKeyPairRequest;
import com.amazonaws.services.ec2.model.CreateKeyPairResult;
import com.amazonaws.services.ec2.model.KeyPair;
import com.amazonaws.services.ec2.model.DeleteKeyPairRequest;
import com.amazonaws.services.ec2.model.RunInstancesRequest;
import com.amazonaws.services.ec2.model.RunInstancesResult;
import com.amazonaws.services.ec2.model.Reservation;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.TerminateInstancesRequest;
import com.amazonaws.services.ec2.model.TerminateInstancesResult;
import com.amazonaws.services.ec2.model.DescribeInstancesRequest;
import com.amazonaws.services.ec2.model.DescribeInstancesResult;

public class Ec2Instance {

	private AmazonEC2 ec2Client;
	private String securityGroupName;
	private String keyName;
	private String instanceID;
	private String publicDNS;
	private String privateKey;

	public Ec2Instance() {
		securityGroupName = "GeneratedSecurityGroup";
		keyName           = "BootwareKey";
		createClientInstance();
	}

	public String getPublicDNS() {
		return publicDNS;
	}

	public String getPrivateKey() {
		return privateKey;
	}

	public void create() {
		createSecurityGroup();
		openPorts();
		createKeyPair();
		createEC2Instance();
	}

	public void terminate() {
		terminateEC2Instance();
		deleteKeyPair();
		deleteSecurityGroup();
	}

	private void createClientInstance() {
		try {
			// load credentials
			InputStream credentialsAsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("AwsCredentials.properties");
			AWSCredentials credentials      = new PropertiesCredentials(credentialsAsStream);

			// create client instance (not an actual ec2 instance)
			ec2Client = new AmazonEC2Client(credentials);

			// set region
			ec2Client.setEndpoint("ec2.eu-west-1.amazonaws.com");
		}
		catch (IOException ex) {
			System.out.println(ex);
		}
		System.out.println("Client instance created.");
	}

	private void createSecurityGroup() {
		CreateSecurityGroupRequest request = new CreateSecurityGroupRequest();

		request
			.withGroupName(securityGroupName)
			.withDescription("Generated by SimTech Bootware");

		CreateSecurityGroupResult result = ec2Client.createSecurityGroup(request);
		System.out.println("Security group '" + securityGroupName + "' created.");
	}

	private void deleteSecurityGroup() {
		DeleteSecurityGroupRequest request = new DeleteSecurityGroupRequest();

		request
			.withGroupName(securityGroupName);

		ec2Client.deleteSecurityGroup(request);
		System.out.println("Security group '" + securityGroupName + "' deleted.");
	}

	private void openPorts() {
		IpPermission ipPermission = new IpPermission();

		ipPermission
			.withIpRanges("0.0.0.0/0")
			.withIpProtocol("tcp")
			.withFromPort(22)
			.withToPort(22);

		AuthorizeSecurityGroupIngressRequest request = new AuthorizeSecurityGroupIngressRequest();

		request
			.withGroupName(securityGroupName)
			.withIpPermissions(ipPermission);

		ec2Client.authorizeSecurityGroupIngress(request);
		System.out.println("Ports opened.");
	}

	private void createKeyPair() {
		CreateKeyPairRequest request = new CreateKeyPairRequest();

		request
			.withKeyName(keyName);

		CreateKeyPairResult result = ec2Client.createKeyPair(request);

		KeyPair keyPair   = new KeyPair();
		keyPair           = result.getKeyPair();
		privateKey        = keyPair.getKeyMaterial();
		System.out.println("Key pair '" + keyName + "' created.");

		try {
			PrintWriter keyFile = new PrintWriter("BootwareKey.pem");
			keyFile.println(privateKey);
			keyFile.close();
		}
		catch (FileNotFoundException ex) {
			System.out.println(ex);
		}
	}

	private void deleteKeyPair() {
		DeleteKeyPairRequest request = new DeleteKeyPairRequest();

		request
			.withKeyName(keyName);

		ec2Client.deleteKeyPair(request);
		System.out.println("Key pair '" + keyName + "' deleted.");
	}

	private void createEC2Instance() {
		RunInstancesRequest request = new RunInstancesRequest();

		request
			.withImageId("ami-2918e35e")
			.withInstanceType("t1.micro")
			.withMinCount(1)
			.withMaxCount(1)
			.withSecurityGroups(securityGroupName)
			.withKeyName(keyName);

		RunInstancesResult result = ec2Client.runInstances(request);
		Reservation reservation   = result.getReservation();
		instanceID                = reservation.getInstances().get(0).getInstanceId();
		System.out.println("EC2 instance '" + instanceID + "' created.");

		waitForState("running");

		DescribeInstancesRequest ipRequest = new DescribeInstancesRequest().withInstanceIds(instanceID);
		DescribeInstancesResult ipResult   = ec2Client.describeInstances(ipRequest);
		//publicDNS = ipResult.getReservations().get(0).getInstances().get(0).getPublicIpAddress();
		publicDNS = ipResult.getReservations().get(0).getInstances().get(0).getPublicDnsName();
		System.out.println("EC2 instance '" + instanceID + "' is now reachable at:");
		System.out.println("    " + publicDNS);
	}

	private void terminateEC2Instance() {
		TerminateInstancesRequest request = new TerminateInstancesRequest();

		request
			.withInstanceIds(instanceID);

		TerminateInstancesResult result = ec2Client.terminateInstances(request);
		waitForState("terminated");
		System.out.println("EC2 instance '" + instanceID + "' terminated.");
	}

	private void waitForState(String state) {
		System.out.print("Waiting for '" + instanceID + "' to reach state '" + state + "'");
		label:
		while (true) {
			System.out.print(".");
			DescribeInstancesRequest request = new DescribeInstancesRequest().withInstanceIds(instanceID);
			DescribeInstancesResult result   = ec2Client.describeInstances(request);
			List<Reservation> reservations   = result.getReservations();

			for (Reservation reservation : reservations) {
				List<Instance> instances = reservation.getInstances();
				for (Instance instance : instances) {
					if (instance.getState().getName().equals(state)) {
						System.out.println("done.");
						break label;
					}
				}
			}

			try {
				Thread.sleep(5000);
			} catch (InterruptedException ex) {
				System.out.println(ex);
			}
		}
	}
}
